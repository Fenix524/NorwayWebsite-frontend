import { toast } from "react-toastify";
import axiosInstance from "./axios";
import { imgPathNormalize } from "../imgPathNormalize";

export const signupUser = async (userData) => {
  try {
    const response = await axiosInstance.post("/auth/signup", userData);
    console.log("User registered:", response);
    toast.success("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π! üéâ");
    return response;
  } catch (error) {
    if (error.response.status === 409) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î üòÆü´§");
    } else if (error.response.status >= 500) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ü§íü§ï");
    } else {
      console.error("Error during signup:", error.message);
    }
  }
};

export const loginUser = async (credentials) => {
  try {
    const response = await axiosInstance.post("/auth/login", credentials);
    console.log("User logged in:", response);
    toast.success("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —É —Å–∏—Å—Ç–µ–º—É! üéâ");
    return response;
  } catch (error) {
    if (error.response.status === 404) {
      toast.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! ü§íü§ï");
    } else if (error.response.status >= 500) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ü§íü§ï");
    } else {
      console.error("Login failed:", error.message);
    }
  }
};

export const logoutUser = async () => {
  try {
    const response = await axiosInstance.post("/auth/logout");
    toast.success("–£—Å–ø—ñ—à–Ω–∏–π –≤–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏! üéâ");
    return response;
  } catch (error) {
    console.error("Error logging out:", error.message);
  }
};

export const getUserProfile = async () => {
  try {
    const response = await axiosInstance.get("/auth/me");
    console.log("User profile:", response);
    return response;
  } catch (error) {
    console.error("Error fetching user profile:", error.message);
  }
};

export const getAllUsers = async () => {
  try {
    const response = await axiosInstance.get("/users");
    console.log("All users:", response);
    return response;
  } catch (error) {
    console.error("Error fetching users:", error.message);
  }
};

export const updateUser = async (userId, updatedData) => {
  try {
    const response = await axiosInstance.put(`/users/${userId}`, updatedData);
    console.log("User updated:", response);
    toast.success("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! üéâ");
    return response;
  } catch (error) {
    if (error.response.status === 404) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π! üòï");
    } else if (error.response.status >= 500) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ü§íü§ï");
    }
    console.error("Error updating user:", error.message);
  }
};

export const deleteUser = async (userId) => {
  try {
    const response = await axiosInstance.delete(`/users/${userId}`);
    console.log("User deleted:", response);
    toast.success("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üéâ");
    return response;
  } catch (error) {
    if (error.response.status === 404) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π! üòï");
    } else if (error.response.status >= 500) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ü§íü§ï");
    }
    console.error("Error deleting user:", error.message);
  }
};
