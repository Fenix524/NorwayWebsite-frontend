import { toast } from "react-toastify";
import axiosInstance from "./axios";

const showErrorToast = (message) => {
  toast.error(message);
};

const showSuccessToast = (message) => {
  toast.success(message);
};

const showInfoToast = (message) => {
  toast.info(message);
};

export const getAllQuestions = async () => {
  try {
    const response = await axiosInstance.get(`/questions`);
    return response.data;
  } catch (error) {
    showErrorToast("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï");
    console.error("Error fetching all questions", error);
    throw error;
  }
};

export const getOneQuestion = async (questionId) => {
  try {
    const response = await axiosInstance.get(`/questions/${questionId}`);
    return response.data;
  } catch (error) {
    showErrorToast("–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§î");
    console.error("Error fetching question", error);
    throw error;
  }
};

export const askQuestion = async (questionData) => {
  try {
    const response = await axiosInstance.post(`/questions`, questionData);
    showSuccessToast("–ü–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–¥–∞–Ω–æ! üòä");
    return response.data;
  } catch (error) {
    if (error.response.status === 401) {
      showInfoToast("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!");
    }
    if (error.response.status >= 500) {
      showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è üòï");
    }

    console.error("Error asking question", error);
    throw error;
  }
};

export const likeQuestion = async (questionId) => {
  try {
    const response = await axiosInstance.post(`questions/like/${questionId}`);
    return response.data;
  } catch (error) {
    if (error.response.status === 401) {
      showInfoToast("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!");
    }
    console.error("Error liking question", error);
    throw error;
  }
};

export const diselikeQuestion = async (questionId) => {
  try {
    const response = await axiosInstance.post(
      `/questions/ask/diselike/${questionId}`
    );
    showSuccessToast("–ü–∏—Ç–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–ª–æ –≤–∞—à –¥–∏–∑–ª–∞–π–∫! üëé");
    return response.data;
  } catch (error) {
    showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –¥–∏–∑–ª–∞–π–∫ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è üòï");
    console.error("Error disliking question", error);
    throw error;
  }
};

export const answerQuestion = async (questionId, answerData) => {
  try {
    const response = await axiosInstance.post(
      `/questions/answers/${questionId}`,
      answerData
    );
    showSuccessToast("–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è! üòä");
    return response.data;
  } catch (error) {
    if (error.response.status === 401) {
      showInfoToast("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!");
    }
    if (error.response.status >= 500) {
      showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è üòï");
    }
    console.error("Error answering question", error);
    throw error;
  }
};

export const likeAnswer = async (questionId, answerId) => {
  try {
    const response = await axiosInstance.post(
      `/questions/answers/like/${questionId}/${answerId}`
    );
    return response.data;
  } catch (error) {
    if (error.response.status === 401) {
      showInfoToast("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!");
    }
    console.error("Error liking answer", error);
    throw error;
  }
};

export const diselikeAnswer = async (questionId, answerId) => {
  try {
    const response = await axiosInstance.post(
      `/answer/diselike/${questionId}/${answerId}`
    );
    showSuccessToast("–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! üëé");
    return response.data;
  } catch (error) {
    showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –¥–∏–∑–ª–∞–π–∫ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòï");
    console.error("Error disliking answer", error);
    throw error;
  }
};

export const updateQuestion = async (questionId, questionData) => {
  console.log({ questionId, questionData });
  try {
    const response = await axiosInstance.put(
      `/questions/answer/${questionId}`,
      questionData
    );
    showSuccessToast("–ü–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚ú®");
    return response.data;
  } catch (error) {
    showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è üòï");
    console.error("Error updating question", error);
    throw error;
  }
};

export const deleteQuestion = async (questionId) => {
  try {
    const response = await axiosInstance.delete(
      `/questions/answer/${questionId}`
    );
    showSuccessToast("–ü–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è");
    return response.data;
  } catch (error) {
    showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è üòï");
    console.error("Error deleting question", error);
    throw error;
  }
};

export const updateAnswer = async (questionId, answerId, answerData) => {
  try {
    const response = await axiosInstance.put(
      `/questions/ask/${questionId}/${answerId}`,
      answerData
    );
    showSuccessToast("–í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚ú®");
    return response.data;
  } catch (error) {
    showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòï");
    console.error("Error updating answer", error);
    throw error;
  }
};

export const deleteAnswer = async (questionId, answerId) => {
  console.log({ questionId, answerId });
  try {
    const response = await axiosInstance.delete(
      `/questions/ask/${questionId}/${answerId}`
    );
    showSuccessToast("–í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è");
    return response.data;
  } catch (error) {
    showErrorToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòï");
    console.error("Error deleting answer", error);
    throw error;
  }
};
